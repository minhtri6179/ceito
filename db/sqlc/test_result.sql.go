// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: test_result.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTest = `-- name: CreateTest :one
INSERT INTO test_result (username)
VALUES ($1)
RETURNING test_id, username, score_id, created_at, update_at
`

func (q *Queries) CreateTest(ctx context.Context, username pgtype.Text) (TestResult, error) {
	row := q.db.QueryRow(ctx, createTest, username)
	var i TestResult
	err := row.Scan(
		&i.TestID,
		&i.Username,
		&i.ScoreID,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteTest = `-- name: DeleteTest :exec
DELETE FROM test_result
WHERE test_id = $1
`

func (q *Queries) DeleteTest(ctx context.Context, testID int64) error {
	_, err := q.db.Exec(ctx, deleteTest, testID)
	return err
}

const getTest = `-- name: GetTest :one
SELECT test_id, username, score_id, created_at, update_at
FROM test_result
WHERE test_id = $1
`

func (q *Queries) GetTest(ctx context.Context, testID int64) (TestResult, error) {
	row := q.db.QueryRow(ctx, getTest, testID)
	var i TestResult
	err := row.Scan(
		&i.TestID,
		&i.Username,
		&i.ScoreID,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const listTests = `-- name: ListTests :many
SELECT test_id, username, score_id, created_at, update_at
FROM test_result
ORDER BY test_id
LIMIT $1 OFFSET $2
`

type ListTestsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTests(ctx context.Context, arg ListTestsParams) ([]TestResult, error) {
	rows, err := q.db.Query(ctx, listTests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TestResult{}
	for rows.Next() {
		var i TestResult
		if err := rows.Scan(
			&i.TestID,
			&i.Username,
			&i.ScoreID,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTest = `-- name: UpdateTest :exec
UPDATE test_result
SET username = $1
WHERE test_id = $2
`

type UpdateTestParams struct {
	Username pgtype.Text `json:"username"`
	TestID   int64       `json:"test_id"`
}

func (q *Queries) UpdateTest(ctx context.Context, arg UpdateTestParams) error {
	_, err := q.db.Exec(ctx, updateTest, arg.Username, arg.TestID)
	return err
}
