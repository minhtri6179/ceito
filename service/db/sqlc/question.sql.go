// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: question.sql

package db

import (
	"context"
	"database/sql"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO question (question_text, answer_id)
VALUES ($1, $2)
RETURNING question_id, question_text, answer_id, created_at, update_at
`

type CreateQuestionParams struct {
	QuestionText sql.NullString `json:"question_text"`
	AnswerID     sql.NullInt32  `json:"answer_id"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, arg.QuestionText, arg.AnswerID)
	var i Question
	err := row.Scan(
		&i.QuestionID,
		&i.QuestionText,
		&i.AnswerID,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM question
WHERE question_id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, questionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteQuestion, questionID)
	return err
}

const getQuestion = `-- name: GetQuestion :one
SELECT question_id, question_text, answer_id, created_at, update_at
FROM question
WHERE question_id = $1
`

func (q *Queries) GetQuestion(ctx context.Context, questionID int32) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, questionID)
	var i Question
	err := row.Scan(
		&i.QuestionID,
		&i.QuestionText,
		&i.AnswerID,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const listQuestions = `-- name: ListQuestions :many
SELECT question_id, question_text, answer_id, created_at, update_at
FROM question
ORDER BY question_id
LIMIT $1 OFFSET $2
`

type ListQuestionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListQuestions(ctx context.Context, arg ListQuestionsParams) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.QuestionID,
			&i.QuestionText,
			&i.AnswerID,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :exec
UPDATE question
SET question_text = $1,
    answer_id = $2
WHERE question_id = $3
`

type UpdateQuestionParams struct {
	QuestionText sql.NullString `json:"question_text"`
	AnswerID     sql.NullInt32  `json:"answer_id"`
	QuestionID   int32          `json:"question_id"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) error {
	_, err := q.db.ExecContext(ctx, updateQuestion, arg.QuestionText, arg.AnswerID, arg.QuestionID)
	return err
}
