// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: test.sql

package db

import (
	"context"
	"database/sql"
)

const createTest = `-- name: CreateTest :one
INSERT INTO test (user_id)
VALUES ($1)
RETURNING test_id, user_id, created_at, update_at
`

func (q *Queries) CreateTest(ctx context.Context, userID sql.NullInt32) (Test, error) {
	row := q.queryRow(ctx, q.createTestStmt, createTest, userID)
	var i Test
	err := row.Scan(
		&i.TestID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteTest = `-- name: DeleteTest :exec
DELETE FROM test
WHERE test_id = $1
`

func (q *Queries) DeleteTest(ctx context.Context, testID int32) error {
	_, err := q.exec(ctx, q.deleteTestStmt, deleteTest, testID)
	return err
}

const getTest = `-- name: GetTest :one
SELECT test_id, user_id, created_at, update_at
FROM test
WHERE test_id = $1
`

func (q *Queries) GetTest(ctx context.Context, testID int32) (Test, error) {
	row := q.queryRow(ctx, q.getTestStmt, getTest, testID)
	var i Test
	err := row.Scan(
		&i.TestID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const listTests = `-- name: ListTests :many
SELECT test_id, user_id, created_at, update_at
FROM test
ORDER BY test_id
LIMIT $1 OFFSET $2
`

type ListTestsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTests(ctx context.Context, arg ListTestsParams) ([]Test, error) {
	rows, err := q.query(ctx, q.listTestsStmt, listTests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.TestID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTest = `-- name: UpdateTest :exec
UPDATE test
SET user_id = $1
WHERE test_id = $2
`

type UpdateTestParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	TestID int32         `json:"test_id"`
}

func (q *Queries) UpdateTest(ctx context.Context, arg UpdateTestParams) error {
	_, err := q.exec(ctx, q.updateTestStmt, updateTest, arg.UserID, arg.TestID)
	return err
}
