// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAnswerStmt, err = db.PrepareContext(ctx, createAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAnswer: %w", err)
	}
	if q.createQuestionStmt, err = db.PrepareContext(ctx, createQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQuestion: %w", err)
	}
	if q.createScoreStmt, err = db.PrepareContext(ctx, createScore); err != nil {
		return nil, fmt.Errorf("error preparing query CreateScore: %w", err)
	}
	if q.createTestStmt, err = db.PrepareContext(ctx, createTest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTest: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAnswerStmt, err = db.PrepareContext(ctx, deleteAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAnswer: %w", err)
	}
	if q.deleteQuestionStmt, err = db.PrepareContext(ctx, deleteQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteQuestion: %w", err)
	}
	if q.deleteScoreStmt, err = db.PrepareContext(ctx, deleteScore); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteScore: %w", err)
	}
	if q.deleteTestStmt, err = db.PrepareContext(ctx, deleteTest); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTest: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getAnswerStmt, err = db.PrepareContext(ctx, getAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query GetAnswer: %w", err)
	}
	if q.getQuestionStmt, err = db.PrepareContext(ctx, getQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuestion: %w", err)
	}
	if q.getScoreStmt, err = db.PrepareContext(ctx, getScore); err != nil {
		return nil, fmt.Errorf("error preparing query GetScore: %w", err)
	}
	if q.getTestStmt, err = db.PrepareContext(ctx, getTest); err != nil {
		return nil, fmt.Errorf("error preparing query GetTest: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listAnswersStmt, err = db.PrepareContext(ctx, listAnswers); err != nil {
		return nil, fmt.Errorf("error preparing query ListAnswers: %w", err)
	}
	if q.listQuestionsStmt, err = db.PrepareContext(ctx, listQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query ListQuestions: %w", err)
	}
	if q.listScoresStmt, err = db.PrepareContext(ctx, listScores); err != nil {
		return nil, fmt.Errorf("error preparing query ListScores: %w", err)
	}
	if q.listTestsStmt, err = db.PrepareContext(ctx, listTests); err != nil {
		return nil, fmt.Errorf("error preparing query ListTests: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateAnswerStmt, err = db.PrepareContext(ctx, updateAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAnswer: %w", err)
	}
	if q.updateQuestionStmt, err = db.PrepareContext(ctx, updateQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateQuestion: %w", err)
	}
	if q.updateScoreStmt, err = db.PrepareContext(ctx, updateScore); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateScore: %w", err)
	}
	if q.updateTestStmt, err = db.PrepareContext(ctx, updateTest); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTest: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAnswerStmt != nil {
		if cerr := q.createAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAnswerStmt: %w", cerr)
		}
	}
	if q.createQuestionStmt != nil {
		if cerr := q.createQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQuestionStmt: %w", cerr)
		}
	}
	if q.createScoreStmt != nil {
		if cerr := q.createScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createScoreStmt: %w", cerr)
		}
	}
	if q.createTestStmt != nil {
		if cerr := q.createTestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTestStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAnswerStmt != nil {
		if cerr := q.deleteAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAnswerStmt: %w", cerr)
		}
	}
	if q.deleteQuestionStmt != nil {
		if cerr := q.deleteQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteQuestionStmt: %w", cerr)
		}
	}
	if q.deleteScoreStmt != nil {
		if cerr := q.deleteScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteScoreStmt: %w", cerr)
		}
	}
	if q.deleteTestStmt != nil {
		if cerr := q.deleteTestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTestStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getAnswerStmt != nil {
		if cerr := q.getAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAnswerStmt: %w", cerr)
		}
	}
	if q.getQuestionStmt != nil {
		if cerr := q.getQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuestionStmt: %w", cerr)
		}
	}
	if q.getScoreStmt != nil {
		if cerr := q.getScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getScoreStmt: %w", cerr)
		}
	}
	if q.getTestStmt != nil {
		if cerr := q.getTestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTestStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listAnswersStmt != nil {
		if cerr := q.listAnswersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAnswersStmt: %w", cerr)
		}
	}
	if q.listQuestionsStmt != nil {
		if cerr := q.listQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listQuestionsStmt: %w", cerr)
		}
	}
	if q.listScoresStmt != nil {
		if cerr := q.listScoresStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listScoresStmt: %w", cerr)
		}
	}
	if q.listTestsStmt != nil {
		if cerr := q.listTestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTestsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateAnswerStmt != nil {
		if cerr := q.updateAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAnswerStmt: %w", cerr)
		}
	}
	if q.updateQuestionStmt != nil {
		if cerr := q.updateQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateQuestionStmt: %w", cerr)
		}
	}
	if q.updateScoreStmt != nil {
		if cerr := q.updateScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateScoreStmt: %w", cerr)
		}
	}
	if q.updateTestStmt != nil {
		if cerr := q.updateTestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTestStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createAnswerStmt   *sql.Stmt
	createQuestionStmt *sql.Stmt
	createScoreStmt    *sql.Stmt
	createTestStmt     *sql.Stmt
	createUserStmt     *sql.Stmt
	deleteAnswerStmt   *sql.Stmt
	deleteQuestionStmt *sql.Stmt
	deleteScoreStmt    *sql.Stmt
	deleteTestStmt     *sql.Stmt
	deleteUserStmt     *sql.Stmt
	getAnswerStmt      *sql.Stmt
	getQuestionStmt    *sql.Stmt
	getScoreStmt       *sql.Stmt
	getTestStmt        *sql.Stmt
	getUserStmt        *sql.Stmt
	listAnswersStmt    *sql.Stmt
	listQuestionsStmt  *sql.Stmt
	listScoresStmt     *sql.Stmt
	listTestsStmt      *sql.Stmt
	listUsersStmt      *sql.Stmt
	updateAnswerStmt   *sql.Stmt
	updateQuestionStmt *sql.Stmt
	updateScoreStmt    *sql.Stmt
	updateTestStmt     *sql.Stmt
	updateUserStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createAnswerStmt:   q.createAnswerStmt,
		createQuestionStmt: q.createQuestionStmt,
		createScoreStmt:    q.createScoreStmt,
		createTestStmt:     q.createTestStmt,
		createUserStmt:     q.createUserStmt,
		deleteAnswerStmt:   q.deleteAnswerStmt,
		deleteQuestionStmt: q.deleteQuestionStmt,
		deleteScoreStmt:    q.deleteScoreStmt,
		deleteTestStmt:     q.deleteTestStmt,
		deleteUserStmt:     q.deleteUserStmt,
		getAnswerStmt:      q.getAnswerStmt,
		getQuestionStmt:    q.getQuestionStmt,
		getScoreStmt:       q.getScoreStmt,
		getTestStmt:        q.getTestStmt,
		getUserStmt:        q.getUserStmt,
		listAnswersStmt:    q.listAnswersStmt,
		listQuestionsStmt:  q.listQuestionsStmt,
		listScoresStmt:     q.listScoresStmt,
		listTestsStmt:      q.listTestsStmt,
		listUsersStmt:      q.listUsersStmt,
		updateAnswerStmt:   q.updateAnswerStmt,
		updateQuestionStmt: q.updateQuestionStmt,
		updateScoreStmt:    q.updateScoreStmt,
		updateTestStmt:     q.updateTestStmt,
		updateUserStmt:     q.updateUserStmt,
	}
}
